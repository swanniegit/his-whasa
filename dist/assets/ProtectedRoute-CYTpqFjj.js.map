{"version":3,"file":"ProtectedRoute-CYTpqFjj.js","sources":["../../src/components/ProtectedRoute.tsx"],"sourcesContent":["import React from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { useAuth } from '../hooks/useAuth'\r\nimport LoadingSpinner from './LoadingSpinner'\r\n\r\ninterface ProtectedRouteProps {\r\n  children: React.ReactNode\r\n  requiredRole?: string\r\n  requiredPermission?: string\r\n  resource?: string\r\n  fallbackPath?: string\r\n}\r\n\r\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({\r\n  children,\r\n  requiredRole,\r\n  requiredPermission,\r\n  fallbackPath = '/dashboard'\r\n}) => {\r\n  const { user, loading, roles, isAdmin } = useAuth()\r\n\r\n  if (loading) {\r\n    return <LoadingSpinner />\r\n  }\r\n\r\n  if (!user) {\r\n    return <Navigate to=\"/login\" replace />\r\n  }\r\n\r\n  // Check for specific role requirement\r\n  if (requiredRole) {\r\n    const hasRole = roles.some(role => role.role.role_name === requiredRole)\r\n    if (!hasRole && !isAdmin()) {\r\n      return <Navigate to={fallbackPath} replace />\r\n    }\r\n  }\r\n\r\n  // Check for specific permission requirement (simplified for now)\r\n  if (requiredPermission) {\r\n    // For now, just check if user is admin for any permission\r\n    if (!isAdmin()) {\r\n      return <Navigate to={fallbackPath} replace />\r\n    }\r\n  }\r\n\r\n  return <>{children}</>\r\n}\r\n\r\nexport default ProtectedRoute"],"names":["ProtectedRoute","children","requiredRole","requiredPermission","fallbackPath","user","loading","roles","isAdmin","useAuth","LoadingSpinner","role","jsx","Navigate"],"mappings":"uJAaA,MAAMA,EAAgD,CAAC,CACrD,SAAAC,EACA,aAAAC,EACA,mBAAAC,EACA,aAAAC,EAAe,YACjB,IAAM,CACJ,KAAM,CAAE,KAAAC,EAAM,QAAAC,EAAS,MAAAC,EAAO,QAAAC,CAAA,EAAYC,EAAA,EAE1C,OAAIH,QACMI,EAAA,EAAe,EAGpBL,EAKDH,GAEE,CADYK,EAAM,QAAaI,EAAK,KAAK,YAAcT,CAAY,GACvD,CAACM,IACRI,EAAAA,IAACC,EAAA,CAAS,GAAIT,EAAc,QAAO,GAAC,EAK3CD,GAEE,CAACK,IACII,EAAAA,IAACC,EAAA,CAAS,GAAIT,EAAc,QAAO,GAAC,oBAIrC,SAAAH,EAAS,EAnBVW,EAAAA,IAACC,EAAA,CAAS,GAAG,SAAS,QAAO,GAAC,CAoBzC"}